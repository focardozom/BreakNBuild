[{"path":"https://focardozom.github.io/BreakNBuild/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 BreakNBuild authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://focardozom.github.io/BreakNBuild/articles/BreakNBuild.html","id":"machine-learning-model-evaluation-using-breaknbuild","dir":"Articles","previous_headings":"","what":"Machine Learning Model Evaluation using BreakNBuild","title":"BreakNBuild","text":"BreakNBuild package provides tools model evaluation progressive data splitting performance analysis. progressive_splits() function enables users assess model behavior across varying training set sizes, generating learning curves reveal critical insights model characteristics : Bias-variance trade-offs Learning rate patterns Optimal training set sizes Potential underfitting overfitting issues vignette demonstrates package’s capabilities using synthetic dataset embedded non-linear relationships. compare two modeling approaches: Linear Regression (LM): parametric model assumes linear relationships, used illustrate model bias can affect generalization performance Support Vector Machine (SVM): flexible non-linear model capable capturing non-linear patterns, providing contrast handling non-linear relationships examples, ’ll show BreakNBuild’s diagnostic tools can inform model selection debugging processes visualizing performance metrics across different training set sizes.","code":""},{"path":"https://focardozom.github.io/BreakNBuild/articles/BreakNBuild.html","id":"simulating-the-dataset","dir":"Articles","previous_headings":"Machine Learning Model Evaluation using BreakNBuild","what":"Simulating the Dataset","title":"BreakNBuild","text":"’ll create synthetic dataset hiding non-linear relationships. ’ll generate 500 observations 5 predictor variables, construct response variable depends linear quadratic terms predictors. non-linear relationship help us showcase different models handle non-linear patterns data. final dataset retain original predictors (without quadratic terms) simulate realistic scenario true underlying non-linear relationship “unknown” modeler.","code":"set.seed(2023) # Ensures reproducibility  n <- 500 # Number of observations X <- matrix(rnorm(n * 5), ncol = 5) # Generating 5 predictors  # Generating non-linear terms X_nonlinear <- cbind(X, X[, 1]^2, X[, 3]^2) beta_nonlinear <- c(.3, -.2, .4, -.1, .2, .6, .8) y_nonlinear <- X_nonlinear %*% beta_nonlinear + rnorm(n)  # Constructing the dataset and removing non-linear terms for model evaluation df_nonlinear <- cbind(y_nonlinear, X_nonlinear) |>   tibble::as_tibble() |>   dplyr::select(-c(V7, V8)) #> Warning: The `x` argument of `as_tibble.matrix()` must have unique column names if #> `.name_repair` is omitted as of tibble 2.0.0. #> ℹ Using compatibility `.name_repair`. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated.  # Assigning column names colnames(df_nonlinear) <- c(\"Y\", paste0(\"X\", 1:5))"},{"path":"https://focardozom.github.io/BreakNBuild/articles/BreakNBuild.html","id":"modeling-approach","dir":"Articles","previous_headings":"Machine Learning Model Evaluation using BreakNBuild","what":"Modeling Approach","title":"BreakNBuild","text":"Now, ’ll specify two modeling approaches ’ll use evaluate dataset.","code":""},{"path":"https://focardozom.github.io/BreakNBuild/articles/BreakNBuild.html","id":"linear-specification","dir":"Articles","previous_headings":"Machine Learning Model Evaluation using BreakNBuild > Modeling Approach","what":"Linear specification","title":"BreakNBuild","text":"Specify linear regression model using parsnip package:","code":"library(parsnip) lm_model <- linear_reg() |>   set_mode(\"regression\")"},{"path":"https://focardozom.github.io/BreakNBuild/articles/BreakNBuild.html","id":"support-vector-machine","dir":"Articles","previous_headings":"Machine Learning Model Evaluation using BreakNBuild > Modeling Approach","what":"Support Vector Machine","title":"BreakNBuild","text":"Specify svm model using parsnip package:","code":"svm_model <- svm_rbf() |>   set_mode(\"regression\")"},{"path":"https://focardozom.github.io/BreakNBuild/articles/BreakNBuild.html","id":"recipe-definition","dir":"Articles","previous_headings":"Machine Learning Model Evaluation using BreakNBuild > Modeling Approach","what":"Recipe Definition","title":"BreakNBuild","text":"’ll create recipe using recipes package define model’s preprocessing steps. recipe specifies relationship response variable Y available predictors. preprocessing step isn’t strictly necessary simple models, demonstrates BreakNBuild’s compatibility tidymodels workflow framework, allowing complex preprocessing scenarios real-world applications.","code":"library(recipes) recipe <- recipe(Y ~ ., data = df_nonlinear)"},{"path":"https://focardozom.github.io/BreakNBuild/articles/BreakNBuild.html","id":"data-splitting","dir":"Articles","previous_headings":"Machine Learning Model Evaluation using BreakNBuild > Modeling Approach","what":"Data Splitting","title":"BreakNBuild","text":"BreakNBuild package’s progressive_splits() function creates multiple training/testing splits data, : testing (assessment) set remains constant 20% total data. training set starts small progressively grows larger. initial training set size (start_size = 7). example, dataset 500 observations: - assessment (testing) set always 100 observations (20% 500) - training set starts 7 observations - subsequent split increases training set size (7, 8, 9, …) - final split uses remaining 400 observations training figure illustrates function organizes progressive data splits:","code":"progressive_sets <- progressive_splits(df_nonlinear, assessment_size = 0.2, start_size = 7)"},{"path":"https://focardozom.github.io/BreakNBuild/articles/BreakNBuild.html","id":"workflow-assembly","dir":"Articles","previous_headings":"Machine Learning Model Evaluation using BreakNBuild","what":"Workflow Assembly","title":"BreakNBuild","text":"Let’s create workflow object used tidymodels framework.","code":""},{"path":"https://focardozom.github.io/BreakNBuild/articles/BreakNBuild.html","id":"workflow-assembly---linear-model","dir":"Articles","previous_headings":"Machine Learning Model Evaluation using BreakNBuild > Workflow Assembly","what":"Workflow Assembly - Linear Model","title":"BreakNBuild","text":"’ll create workflow object combines linear regression model preprocessing recipe. tidymodels framework, workflows provide convenient way bundle model specifications preprocessing steps:","code":"library(workflows) lm_wf <- workflow() |>   add_model(lm_model) |>   add_recipe(recipe)"},{"path":"https://focardozom.github.io/BreakNBuild/articles/BreakNBuild.html","id":"model-estimation","dir":"Articles","previous_headings":"Machine Learning Model Evaluation using BreakNBuild > Workflow Assembly","what":"Model Estimation","title":"BreakNBuild","text":"LM model capture non-linear relationship data, therefore likely perform poorly. get training error use get_training_error. function uses fit_resamples() rsample package fit model training set computes error using yardstick package. get validation error use get_validation_error. function uses fit_resamples() uses collect_metrics() function get error validation sets.","code":""},{"path":"https://focardozom.github.io/BreakNBuild/articles/BreakNBuild.html","id":"compute-the-training-error","dir":"Articles","previous_headings":"Machine Learning Model Evaluation using BreakNBuild > Workflow Assembly > Model Estimation","what":"Compute the training error","title":"BreakNBuild","text":"","code":"training_error <- get_training_error(lm_wf, progressive_sets, \"rsq\")"},{"path":"https://focardozom.github.io/BreakNBuild/articles/BreakNBuild.html","id":"compute-the-validation-error","dir":"Articles","previous_headings":"Machine Learning Model Evaluation using BreakNBuild > Workflow Assembly > Model Estimation","what":"Compute the validation error","title":"BreakNBuild","text":"","code":"validation_error <- get_validation_error(lm_wf, progressive_sets, \"rsq\")"},{"path":"https://focardozom.github.io/BreakNBuild/articles/BreakNBuild.html","id":"visualization-of-findings","dir":"Articles","previous_headings":"Machine Learning Model Evaluation using BreakNBuild > Workflow Assembly > Model Estimation","what":"Visualization of Findings","title":"BreakNBuild","text":"two objects, can use get_learning_curve() function plot training validation errors: linear model’s performance confirms expectations - struggles capture non-linear relationship data. validation error remains consistently poor, showing improvement even training data. Furthermore, reaching 50 observations training set, model’s learning plateaus begins deteriorate, indicating additional data help model learn underlying non-linear patterns.","code":"get_learning_curve(validation_error, training_error)"},{"path":"https://focardozom.github.io/BreakNBuild/articles/BreakNBuild.html","id":"workflow-assembly---non-linear-model","dir":"Articles","previous_headings":"Machine Learning Model Evaluation using BreakNBuild > Workflow Assembly","what":"Workflow Assembly - Non-linear Model","title":"BreakNBuild","text":"SVM model, ’ll create similar workflow combines SVM specification preprocessing recipe. ensures consistent data preparation across models changing modeling approach:","code":"svm_wf <- workflow() |>   add_model(svm_model) |>   add_recipe(recipe)"},{"path":"https://focardozom.github.io/BreakNBuild/articles/BreakNBuild.html","id":"model-estimation-1","dir":"Articles","previous_headings":"Machine Learning Model Evaluation using BreakNBuild > Workflow Assembly","what":"Model Estimation","title":"BreakNBuild","text":", can compute training validation errors SVM model.","code":""},{"path":"https://focardozom.github.io/BreakNBuild/articles/BreakNBuild.html","id":"compute-the-training-error-1","dir":"Articles","previous_headings":"Machine Learning Model Evaluation using BreakNBuild > Workflow Assembly > Model Estimation","what":"Compute the training error","title":"BreakNBuild","text":"","code":"training_error <- get_training_error(svm_wf, progressive_sets, \"rsq\")"},{"path":"https://focardozom.github.io/BreakNBuild/articles/BreakNBuild.html","id":"compute-the-validation-error-1","dir":"Articles","previous_headings":"Machine Learning Model Evaluation using BreakNBuild > Workflow Assembly > Model Estimation","what":"Compute the validation error","title":"BreakNBuild","text":"","code":"validation_error <- get_validation_error(svm_wf, progressive_sets, \"rsq\")"},{"path":"https://focardozom.github.io/BreakNBuild/articles/BreakNBuild.html","id":"visualization-of-findings-1","dir":"Articles","previous_headings":"Machine Learning Model Evaluation using BreakNBuild > Workflow Assembly > Model Estimation","what":"Visualization of Findings","title":"BreakNBuild","text":", much better! SVM model able capture non-linear relationship data, therefore performs better linear model. validation error lower, model continues learn even training set size increased. looks like data beneficial SVM model.","code":"get_learning_curve(validation_error, training_error)"},{"path":"https://focardozom.github.io/BreakNBuild/articles/BreakNBuild.html","id":"conclusion","dir":"Articles","previous_headings":"Machine Learning Model Evaluation using BreakNBuild","what":"Conclusion","title":"BreakNBuild","text":"progressive_splits() function BreakNBuild effective tool evaluating model performance across increasing training set sizes. can help diagnose issues suboptimal model performance due biased model selection. get_learning_curve() function provides intuitive visualization relationship training set size model performance, helping users identify optimal training set sizes specific use cases.","code":""},{"path":"https://focardozom.github.io/BreakNBuild/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Francisco Cardozo. Author, maintainer.","code":""},{"path":"https://focardozom.github.io/BreakNBuild/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Cardozo F (2024). BreakNBuild: Optimizing Machine Learning Models Sample Size Variation Training Subsets. R package version 0.0.0.9000, https://focardozom.github.io/BreakNBuild/.","code":"@Manual{,   title = {BreakNBuild: Optimizing Machine Learning Models through Sample Size Variation in Training Subsets},   author = {Francisco Cardozo},   year = {2024},   note = {R package version 0.0.0.9000},   url = {https://focardozom.github.io/BreakNBuild/}, }"},{"path":[]},{"path":"https://focardozom.github.io/BreakNBuild/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Optimizing Machine Learning Models through Sample Size Variation in Training Subsets","text":"BreakNBuild R package designed evaluate model performance progressively sampled data. approach particularly useful debugging machine learning, allows observe bias-variance trade-relation sample size used training model.","code":""},{"path":"https://focardozom.github.io/BreakNBuild/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"Optimizing Machine Learning Models through Sample Size Variation in Training Subsets","text":"Progressive Data Splitting: partition dataset training validation subsets. Customizable Sample Sizes: Control size training data understand model performance different conditions. Easy Integration: Built rsample package, BreakNBuild seamlessly integrates tidymodels framework. ![man/figures/schema_progressive_split.svg]","code":""},{"path":"https://focardozom.github.io/BreakNBuild/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Optimizing Machine Learning Models through Sample Size Variation in Training Subsets","text":"install latest version GitHub, use:","code":"# install.packages(\"devtools\") devtools::install_github(\"https://github.com/focardozom/BreakNBuild\")"},{"path":"https://focardozom.github.io/BreakNBuild/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Optimizing Machine Learning Models through Sample Size Variation in Training Subsets","text":"’s quick example get started:","code":"library(BreakNBuild)  splits <- progressive_splits(data, validation_size = 0.2, start_size = 10)"},{"path":"https://focardozom.github.io/BreakNBuild/reference/apply_rec.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply Preprocessing Recipe — apply_rec","title":"Apply Preprocessing Recipe — apply_rec","text":"Preprocesses dataset using specified recipe.","code":""},{"path":"https://focardozom.github.io/BreakNBuild/reference/apply_rec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply Preprocessing Recipe — apply_rec","text":"","code":"apply_rec(x, rec)"},{"path":"https://focardozom.github.io/BreakNBuild/reference/apply_rec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply Preprocessing Recipe — apply_rec","text":"x dataset preprocessed. rec recipe object specifying preprocessing steps.","code":""},{"path":"https://focardozom.github.io/BreakNBuild/reference/apply_rec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply Preprocessing Recipe — apply_rec","text":"preprocessed dataset based provided recipe.","code":""},{"path":"https://focardozom.github.io/BreakNBuild/reference/apply_rec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply Preprocessing Recipe — apply_rec","text":"","code":"if (FALSE) { # \\dontrun{   # Assuming 'rec' is a predefined recipe object and 'data' is available   preprocessed_data <- apply_rec(data, rec) } # }"},{"path":"https://focardozom.github.io/BreakNBuild/reference/create_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Plot from Model Results — create_plot","title":"Create a Plot from Model Results — create_plot","text":"function takes model data splits, computes validation training errors, generates plot compare errors.","code":""},{"path":"https://focardozom.github.io/BreakNBuild/reference/create_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Plot from Model Results — create_plot","text":"","code":"create_plot(x, y)"},{"path":"https://focardozom.github.io/BreakNBuild/reference/create_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Plot from Model Results — create_plot","text":"x machine learning model object. y object containing data splits.","code":""},{"path":"https://focardozom.github.io/BreakNBuild/reference/create_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Plot from Model Results — create_plot","text":"ggplot object visualizing validation training errors.","code":""},{"path":"https://focardozom.github.io/BreakNBuild/reference/create_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Plot from Model Results — create_plot","text":"","code":"if (FALSE) { # \\dontrun{   # Assuming lm_model and data_splits are available   create_plot(lm_model, data_splits) } # }"},{"path":"https://focardozom.github.io/BreakNBuild/reference/extrac_prep.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract and Prepare Preprocessor from Model — extrac_prep","title":"Extract and Prepare Preprocessor from Model — extrac_prep","text":"Extracts preprocessor model applies provided data.","code":""},{"path":"https://focardozom.github.io/BreakNBuild/reference/extrac_prep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract and Prepare Preprocessor from Model — extrac_prep","text":"","code":"extrac_prep(model, x)"},{"path":"https://focardozom.github.io/BreakNBuild/reference/extrac_prep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract and Prepare Preprocessor from Model — extrac_prep","text":"model model object, typically workflow recipe. x dataset preprocessed.","code":""},{"path":"https://focardozom.github.io/BreakNBuild/reference/extrac_prep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract and Prepare Preprocessor from Model — extrac_prep","text":"preprocessed dataset, preprocessing steps defined model applied x.","code":""},{"path":"https://focardozom.github.io/BreakNBuild/reference/extrac_prep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract and Prepare Preprocessor from Model — extrac_prep","text":"","code":"if (FALSE) { # \\dontrun{   # Assuming 'model' is a predefined model object and 'data' is available   preprocessed_data <- extrac_prep(model, data) } # }"},{"path":"https://focardozom.github.io/BreakNBuild/reference/extract_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Fitted Model Object from Resampling — extract_fit","title":"Extract Fitted Model Object from Resampling — extract_fit","text":"Extracts fitted model object resample. function simplifies process extracting fit parameters model object created using parsnip package. particularly useful scenarios model objects embedded within resampled results.","code":""},{"path":"https://focardozom.github.io/BreakNBuild/reference/extract_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Fitted Model Object from Resampling — extract_fit","text":"","code":"extract_fit(x)  extract_fit(x)"},{"path":"https://focardozom.github.io/BreakNBuild/reference/extract_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Fitted Model Object from Resampling — extract_fit","text":"x model object, typically resulting resampling process (e.g., using fit_resamples rsample package).","code":""},{"path":"https://focardozom.github.io/BreakNBuild/reference/extract_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Fitted Model Object from Resampling — extract_fit","text":"list extracted fitted model objects. Returns extracted fit parameters provided model object.","code":""},{"path":[]},{"path":"https://focardozom.github.io/BreakNBuild/reference/extract_fit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Fitted Model Object from Resampling — extract_fit","text":"","code":"if (FALSE) { # \\dontrun{   # Assuming 'resample_result' is predefined   fitted_models <- extract_fit(resample_result) } # } if (FALSE) { # \\dontrun{ data(iris) model <- linear_reg() |> set_engine(\"lm\") resamples <- vfold_cv(iris) fit_results <- model |> fit_resamples(resamples) extracted_params <- extract_fit(fit_results) } # }"},{"path":"https://focardozom.github.io/BreakNBuild/reference/get_analysis_augment.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Validation Data and Augmented Predictions — get_analysis_augment","title":"Extract Validation Data and Augmented Predictions — get_analysis_augment","text":"Performs resampling model extracts validation data augmented predictions.","code":""},{"path":"https://focardozom.github.io/BreakNBuild/reference/get_analysis_augment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Validation Data and Augmented Predictions — get_analysis_augment","text":"","code":"get_analysis_augment(model, splits)"},{"path":"https://focardozom.github.io/BreakNBuild/reference/get_analysis_augment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Validation Data and Augmented Predictions — get_analysis_augment","text":"model machine learning model object, compatible tune::fit_resamples. splits Resampling splits object, usually created using rsample package.","code":""},{"path":"https://focardozom.github.io/BreakNBuild/reference/get_analysis_augment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Validation Data and Augmented Predictions — get_analysis_augment","text":"tibble containing augmented prediction data validation set.","code":""},{"path":"https://focardozom.github.io/BreakNBuild/reference/get_analysis_augment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Validation Data and Augmented Predictions — get_analysis_augment","text":"","code":"if (FALSE) { # \\dontrun{   # Assuming 'model' and 'splits' are predefined   validation_data <- get_analysis_augment(model, splits) } # }"},{"path":"https://focardozom.github.io/BreakNBuild/reference/get_learning_curve.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a Plot from Validation and Training Results — get_learning_curve","title":"Generate a Plot from Validation and Training Results — get_learning_curve","text":"function takes results model validation training, creates line plot comparing two.","code":""},{"path":"https://focardozom.github.io/BreakNBuild/reference/get_learning_curve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a Plot from Validation and Training Results — get_learning_curve","text":"","code":"get_learning_curve(validation_results, training_results)"},{"path":"https://focardozom.github.io/BreakNBuild/reference/get_learning_curve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a Plot from Validation and Training Results — get_learning_curve","text":"validation_results data frame validation results. training_results data frame training results.","code":""},{"path":"https://focardozom.github.io/BreakNBuild/reference/get_learning_curve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a Plot from Validation and Training Results — get_learning_curve","text":"ggplot object representing validation training results.","code":""},{"path":"https://focardozom.github.io/BreakNBuild/reference/get_learning_curve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a Plot from Validation and Training Results — get_learning_curve","text":"","code":"if (FALSE) { # \\dontrun{   # Assuming validation_results and training_results are available   get_learning_curve(validation_results, training_results) } # }"},{"path":"https://focardozom.github.io/BreakNBuild/reference/get_training_error.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Training Error for Machine Learning Models — get_training_error","title":"Calculate Training Error for Machine Learning Models — get_training_error","text":"Computes training error given machine learning model using resampled datasets. function designed fit model split data, predict outcomes, calculate performance metric (e.g., R-squared) resample.","code":""},{"path":"https://focardozom.github.io/BreakNBuild/reference/get_training_error.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Training Error for Machine Learning Models — get_training_error","text":"","code":"get_training_error(model, splits, metric)"},{"path":"https://focardozom.github.io/BreakNBuild/reference/get_training_error.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Training Error for Machine Learning Models — get_training_error","text":"model machine learning model object compatible fit_resamples method. splits object containing data splits, typically generated functions rsample package, used resampling. metric performance metric interest string.","code":""},{"path":"https://focardozom.github.io/BreakNBuild/reference/get_training_error.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Training Error for Machine Learning Models — get_training_error","text":"data frame containing performance metric (R-squared default) resample identification error type \"Training\".","code":""},{"path":[]},{"path":"https://focardozom.github.io/BreakNBuild/reference/get_training_error.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Training Error for Machine Learning Models — get_training_error","text":"","code":"if (FALSE) { # \\dontrun{ library(tidymodels) # assuming tidymodels includes necessary packages data(iris) model <- linear_reg() |> set_engine(\"lm\") splits <- initial_split(iris, prop = 0.75) training_error <- get_training_error(model, splits) } # }"},{"path":"https://focardozom.github.io/BreakNBuild/reference/get_validation_augment.html","id":null,"dir":"Reference","previous_headings":"","what":"Augment Analysis Data from Resampling Results — get_validation_augment","title":"Augment Analysis Data from Resampling Results — get_validation_augment","text":"function fits model resampled datasets, preprocesses analysis data, augments .","code":""},{"path":"https://focardozom.github.io/BreakNBuild/reference/get_validation_augment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Augment Analysis Data from Resampling Results — get_validation_augment","text":"","code":"get_validation_augment(model, splits)"},{"path":"https://focardozom.github.io/BreakNBuild/reference/get_validation_augment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Augment Analysis Data from Resampling Results — get_validation_augment","text":"model machine learning model object, compatible tune::fit_resamples. splits Resampling splits object, usually created using rsample package.","code":""},{"path":"https://focardozom.github.io/BreakNBuild/reference/get_validation_augment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Augment Analysis Data from Resampling Results — get_validation_augment","text":"tibble containing augmented data analysis portion resampling splits.","code":""},{"path":"https://focardozom.github.io/BreakNBuild/reference/get_validation_augment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Augment Analysis Data from Resampling Results — get_validation_augment","text":"","code":"if (FALSE) { # \\dontrun{   # Assuming 'model' is a predefined model object and 'splits' is defined   analysis_data <- get_validation_augment(model, splits) } # }"},{"path":"https://focardozom.github.io/BreakNBuild/reference/get_validation_error.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Validation Error for Machine Learning Models — get_validation_error","title":"Calculate Validation Error for Machine Learning Models — get_validation_error","text":"Computes validation error given machine learning model using resampled datasets. function fits model split data collects filters performance metrics, specifically focusing R-squared (rsq) validation.","code":""},{"path":"https://focardozom.github.io/BreakNBuild/reference/get_validation_error.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Validation Error for Machine Learning Models — get_validation_error","text":"","code":"get_validation_error(model, splits, metric)"},{"path":"https://focardozom.github.io/BreakNBuild/reference/get_validation_error.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Validation Error for Machine Learning Models — get_validation_error","text":"model machine learning model object, expected compatible fit_resamples method tune package. splits object containing data splits, typically generated functions rsample package, used resampling. metric performance metric interest string.","code":""},{"path":"https://focardozom.github.io/BreakNBuild/reference/get_validation_error.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Validation Error for Machine Learning Models — get_validation_error","text":"data frame containing R-squared metric resample along identification error type \"Validation\".","code":""},{"path":[]},{"path":"https://focardozom.github.io/BreakNBuild/reference/get_validation_error.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Validation Error for Machine Learning Models — get_validation_error","text":"","code":"if (FALSE) { # \\dontrun{ library(dplyr) library(tidymodels) # assuming tidymodels includes necessary packages data(iris) model <- linear_reg() %>% set_engine(\"lm\") splits <- vfold_cv(iris, v = 5) validation_error <- get_validation_error(model, splits) } # }"},{"path":"https://focardozom.github.io/BreakNBuild/reference/plot_theme.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Customized ggplot2 Theme — plot_theme","title":"Create a Customized ggplot2 Theme — plot_theme","text":"function generates customized theme ggplot2 plots. modifies elements legend position, axis text, line colors.","code":""},{"path":"https://focardozom.github.io/BreakNBuild/reference/plot_theme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Customized ggplot2 Theme — plot_theme","text":"","code":"plot_theme()"},{"path":"https://focardozom.github.io/BreakNBuild/reference/plot_theme.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Customized ggplot2 Theme — plot_theme","text":"ggplot2::theme object can added ggplot2 plots.","code":""},{"path":"https://focardozom.github.io/BreakNBuild/reference/plot_theme.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Customized ggplot2 Theme — plot_theme","text":"","code":"if (FALSE) { # \\dontrun{   ggplot(data, aes(x, y)) +   geom_line() +   plot_theme() } # }"},{"path":"https://focardozom.github.io/BreakNBuild/reference/progressive_splits.html","id":null,"dir":"Reference","previous_headings":"","what":"Progressive Split of Dataset for Model Evaluation — progressive_splits","title":"Progressive Split of Dataset for Model Evaluation — progressive_splits","text":"Dynamically partitions dataset training validation subsets, allowing evaluation machine learning model performance across varying sample sizes.","code":""},{"path":"https://focardozom.github.io/BreakNBuild/reference/progressive_splits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Progressive Split of Dataset for Model Evaluation — progressive_splits","text":"","code":"progressive_splits(data, assessment_size = 0, start_size = 2)"},{"path":"https://focardozom.github.io/BreakNBuild/reference/progressive_splits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Progressive Split of Dataset for Model Evaluation — progressive_splits","text":"data data frame containing dataset split. assessment_size numeric value 0 1 indicating proportion dataset used validation set. Default 0.2. start_size integer indicating initial size training set. Must least 1 less number rows dataset minus size validation set. Default 2.","code":""},{"path":"https://focardozom.github.io/BreakNBuild/reference/progressive_splits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Progressive Split of Dataset for Model Evaluation — progressive_splits","text":"object class 'rset' containing training validation splits iteration increasing training set size.","code":""},{"path":[]},{"path":"https://focardozom.github.io/BreakNBuild/reference/progressive_splits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Progressive Split of Dataset for Model Evaluation — progressive_splits","text":"","code":"# Example usage: data(iris) splits <- progressive_splits(iris, assessment_size = 0.2, start_size = 10)"}]
